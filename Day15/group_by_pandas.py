# -*- coding: utf-8 -*-
"""Group_by_pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-oZ9uIgJbv8j_7WA2cTpZpj4TGP5maPK
"""

# Load the data
import pandas as pd
df = pd.read_csv("MarketArrivals.csv")

df.info()

"""# three tasks achieved by Group by in Pandas

- Splitting --> ONLY creates the groups

- 1. Aggregation

- 2. Transformation

- 3. Filteration

# Splitting 

It is ONLY going to group rows as per the criteria
"""

for grp in df.groupby(['month']):
    print(grp)

for grp in df.groupby(['month','state']): # group by on multiple column
    print(grp)

"""# Aggregation 

Perform a aggregate operation on all groups created by splitting ( groupby function)

For applying aggregate function we have to select column(s)

## Apply aggregate function on a single column
"""

df_min_val = df.groupby(['month'])['priceMin'].min()

df_min_val

# write syntax for getting max value from column priceMax for every state
df.groupby(['state'])['priceMax'].max()

"""# List of Aggregation FUnctions on Group by 

mean(): Compute mean of groups

sum(): Compute sum of group values

size(): Compute group sizes

count(): Compute count of group

std(): Standard deviation of groups

var(): Compute variance of groups

sem(): Standard error of the mean of groups.
 It describes how every value of the group is away from the mean.

describe(): Generates descriptive statistics

first(): Compute first of group values

last(): Compute last of group values

nth() : Take nth value, or a subset if n is a list

min(): Compute min of group values

max(): Compute max of group values

nunique() : count of unique records in selected column

unique() : unique values in selected column

ref : https://pandas.pydata.org/pandas-docs/version/0.23/api.html#function-application

ref : https://cmdlinetips.com/2019/10/pandas-groupby-13-functions-to-aggregate/
"""

df.groupby(['month'])['priceMin'].describe()

"""## Apply Aggregate multiple functions on single column

- use agg function

- agg function allows to apply a given function on the selected column

- we can give list of aggregation functions to be applied
"""

import numpy as np
df.groupby(['month'])['priceMin'].agg([np.min, np.max, np.mean, np.median])

"""## Apply one aggregate function on multiple columns"""

df.groupby(['state'])[['priceMod','quantity']].std()

"""# Transformation

- use function transform and pass argument the function which will transform the selected column
"""

# this function is called for every group generated by group by 
def trans_quant_mode(quan): # quan receieve list of all quantities from one group at a time
    # print(quan)
    return quan - quan.mode()[0]

# this function is called for every group generated by group by 
def trans_quant(quan): # quan receieve list of all quantities from one group at a time
    # print(quan)
    return quan - quan.mean()

# WAP to substract mean of quantity for every state from quantity 
# --> solution :: groupby column :: state , transform column :: quantity
df.groupby(['state'])['quantity'].transform(trans_quant_mode)

# select priceMod for every month where state == MP
# substract mean priceMod from every month priceMod from state == MP

df_MP = df.loc[df['state'] == 'MP', :].copy()

df_MP.shape

def sub_mean(x):
    return x - x.mean()

df_MP.groupby(['month'])['priceMod'].transform(sub_mean)

df_MP.groupby(['month'])['priceMod'].transform(lambda x: x-x.mean())

"""## How to store results in new column after transformation"""

df_MP['trans_priceMod'] = df_MP.groupby(['month'])['priceMod'].transform(sub_mean)

df_MP.head()

"""# Filter Operation

It selects groups based on a condition

- use filter function on groupby OBJECT

- filter function takes argument a function --> this function used as argument should return TRUE / FALSE for every group

https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.filter.html

## Select all records which belong a state whoes mean priceMin is less than 3000
"""

df.groupby(['state']).filter(lambda x: x['priceMin'].mean() < 2000 )

def filter_price(grp):
    return grp['priceMin'].mean() < 3000

df.groupby(['state']).filter(filter_price)

df['quantity'].mean()

"""## Select all records of months where mean quantity is greater than 76604"""

def filter_quantity(grp):
    return grp['quantity'].mean() > 76604

    #return grp['quantity'].min() > 76604
    #return grp['quantity'].max() > 76604

df.groupby(['month']).filter(filter_quantity)